1)ƒелаем пул решений через жадный алгоритм. ћожно построить одно решение и его мутировать до заполнени€ пула. ≈стественно, уже здесь нужна проверка на валидность.
2)¬ыбираем какую-то часть попул€ции, котора€ будет мутировать - например, треть или половину. 
3)ћутируем выбранных особей.
’ороший вопрос - когда мы мутируем до валидности - нужно ли мутировать "плохой" исходник до позеленени€, или же мутировать невалидных детей.
≈щЄ один хороший вопрос - сколько битов € хочу мутировать.
4)¬ыбираем пары особей дл€ скрещивани€.
¬ыбор пар особей тоже может быть случайным. ѕо крайней мере, у мен€ нет идей по этому поводу.
5)ƒелаем скрещивание.
- можно из 1 скрещивани€ получать одну, две, сколько хотим особей. јналогично, придЄтс€ провер€ть результат скрещивани€, 
поэтому разумно сделать такую функцию скрещивани€, котора€ позвол€ет наделать сколько угодно потомков из пары -
например, брать rand битов из первого и n-rand из второго - последовательно. »ли на каждом бите подкидываем монетку и берЄм из первого или второго. »ли делаем монетку с разными весами.
6)ќцениваем результаты скрещивани€. ѕредлагаетс€ сделать так: rating=(1+abs(cost(currGen)-cost(best)))^(-1). 
ќцениваетс€ кажда€ особь. ¬ыбираем столько, чтобы заполнить новый пул.
ћне кажетс€, что можно делать сравнени€ с максимумом, кооторый получаетс€ дл€ гена вида 111...11. 
7)ƒелаем пинк шайни графикс, использу€ рейтинг лучшего решени€ и номер генерации.
goto(2)
